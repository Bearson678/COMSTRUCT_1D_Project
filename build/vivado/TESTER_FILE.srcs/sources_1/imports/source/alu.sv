/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    localparam _MP_SIZE_161758081 = 6'h20;
    logic [31:0] M_adder1_a;
    logic [31:0] M_adder1_b;
    logic [5:0] M_adder1_alufn_signal;
    logic [31:0] M_adder1_out;
    logic M_adder1_z;
    logic M_adder1_v;
    logic M_adder1_n;
    
    adder #(
        .SIZE(_MP_SIZE_161758081)
    ) adder1 (
        .a(M_adder1_a),
        .b(M_adder1_b),
        .alufn_signal(M_adder1_alufn_signal),
        .out(M_adder1_out),
        .z(M_adder1_z),
        .v(M_adder1_v),
        .n(M_adder1_n)
    );
    
    
    logic M_compare1_z;
    logic M_compare1_v;
    logic M_compare1_n;
    logic [5:0] M_compare1_alufn;
    logic M_compare1_cmp;
    
    compare compare1 (
        .z(M_compare1_z),
        .v(M_compare1_v),
        .n(M_compare1_n),
        .alufn(M_compare1_alufn),
        .cmp(M_compare1_cmp)
    );
    
    
    localparam _MP_SIZE_1196089566 = 6'h20;
    logic [31:0] M_boolean1_a;
    logic [31:0] M_boolean1_b;
    logic [5:0] M_boolean1_alufn;
    logic [31:0] M_boolean1_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_1196089566)
    ) boolean1 (
        .a(M_boolean1_a),
        .b(M_boolean1_b),
        .alufn(M_boolean1_alufn),
        .bool(M_boolean1_bool)
    );
    
    
    logic [31:0] M_shifter1_a;
    logic [4:0] M_shifter1_b;
    logic [5:0] M_shifter1_alufn;
    logic [31:0] M_shifter1_shift;
    
    shifter shifter1 (
        .a(M_shifter1_a),
        .b(M_shifter1_b),
        .alufn(M_shifter1_alufn),
        .shift(M_shifter1_shift)
    );
    
    
    logic [31:0] M_multiplier1_a;
    logic [31:0] M_multiplier1_b;
    logic [31:0] M_multiplier1_mul;
    
    multiplier multiplier1 (
        .a(M_multiplier1_a),
        .b(M_multiplier1_b),
        .mul(M_multiplier1_mul)
    );
    
    
    logic [31:0] M_divider2_1_a;
    logic [31:0] M_divider2_1_d;
    
    divider2 divider2_1 (
        .a(M_divider2_1_a),
        .d(M_divider2_1_d)
    );
    
    
    logic [31:0] out_sig;
    always @* begin
        M_adder1_a = a;
        M_adder1_b = b;
        M_adder1_alufn_signal = alufn;
        z = M_adder1_z;
        v = M_adder1_v;
        n = M_adder1_n;
        M_compare1_z = M_adder1_z;
        M_compare1_v = M_adder1_v;
        M_compare1_n = M_adder1_n;
        M_compare1_alufn = alufn;
        M_boolean1_a = a;
        M_boolean1_b = b;
        M_boolean1_alufn = alufn;
        M_shifter1_a = a;
        M_shifter1_b = b[3'h4:1'h0];
        M_shifter1_alufn = alufn;
        M_multiplier1_a = a;
        M_multiplier1_b = b;
        M_divider2_1_a = a;
        
        case (alufn)
            6'h0: begin
                out_sig = M_adder1_out;
            end
            6'h1: begin
                out_sig = M_adder1_out;
            end
            6'h2: begin
                out_sig = M_multiplier1_mul;
            end
            6'h3: begin
                out_sig = M_divider2_1_d;
            end
            6'h18: begin
                out_sig = M_boolean1_bool;
            end
            6'h1e: begin
                out_sig = M_boolean1_bool;
            end
            6'h16: begin
                out_sig = M_boolean1_bool;
            end
            6'h1a: begin
                out_sig = M_boolean1_bool;
            end
            6'h1c: begin
                out_sig = M_boolean1_bool;
            end
            6'h20: begin
                out_sig = M_shifter1_shift;
            end
            6'h21: begin
                out_sig = M_shifter1_shift;
            end
            6'h23: begin
                out_sig = M_shifter1_shift;
            end
            6'h33: begin
                out_sig = {31'h0, M_compare1_cmp};
            end
            6'h35: begin
                out_sig = {31'h0, M_compare1_cmp};
            end
            6'h37: begin
                out_sig = {31'h0, M_compare1_cmp};
            end
            default: begin
                out_sig = 1'h0;
            end
        endcase
        out = out_sig;
    end
    
    
endmodule