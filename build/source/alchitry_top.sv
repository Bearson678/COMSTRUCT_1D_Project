/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam SLOW_CLOCK_DIV = 5'h15;
    localparam CLK_FREQ = 24'h989680;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam _MP_STAGES_786040426 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_786040426)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_624753288 = 1'h1;
    localparam _MP_FALL_624753288 = 1'h0;
    logic M_p1l_button_edge_detector_in;
    logic M_p1l_button_edge_detector_out;
    
    edge_detector #(
        .RISE(_MP_RISE_624753288),
        .FALL(_MP_FALL_624753288)
    ) p1l_button_edge_detector (
        .clk(clk),
        .in(M_p1l_button_edge_detector_in),
        .out(M_p1l_button_edge_detector_out)
    );
    
    
    localparam _MP_RISE_359315523 = 1'h1;
    localparam _MP_FALL_359315523 = 1'h0;
    logic M_p1r_button_edge_detector_in;
    logic M_p1r_button_edge_detector_out;
    
    edge_detector #(
        .RISE(_MP_RISE_359315523),
        .FALL(_MP_FALL_359315523)
    ) p1r_button_edge_detector (
        .clk(clk),
        .in(M_p1r_button_edge_detector_in),
        .out(M_p1r_button_edge_detector_out)
    );
    
    
    localparam _MP_RISE_2087711545 = 1'h1;
    localparam _MP_FALL_2087711545 = 1'h0;
    logic M_p2l_button_edge_detector_in;
    logic M_p2l_button_edge_detector_out;
    
    edge_detector #(
        .RISE(_MP_RISE_2087711545),
        .FALL(_MP_FALL_2087711545)
    ) p2l_button_edge_detector (
        .clk(clk),
        .in(M_p2l_button_edge_detector_in),
        .out(M_p2l_button_edge_detector_out)
    );
    
    
    localparam _MP_RISE_406315001 = 1'h1;
    localparam _MP_FALL_406315001 = 1'h0;
    logic M_p2r_button_edge_detector_in;
    logic M_p2r_button_edge_detector_out;
    
    edge_detector #(
        .RISE(_MP_RISE_406315001),
        .FALL(_MP_FALL_406315001)
    ) p2r_button_edge_detector (
        .clk(clk),
        .in(M_p2r_button_edge_detector_in),
        .out(M_p2r_button_edge_detector_out)
    );
    
    
    localparam _MP_RISE_1881140541 = 1'h1;
    localparam _MP_FALL_1881140541 = 1'h0;
    logic M_p1split_button_edge_detector_in;
    logic M_p1split_button_edge_detector_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1881140541),
        .FALL(_MP_FALL_1881140541)
    ) p1split_button_edge_detector (
        .clk(clk),
        .in(M_p1split_button_edge_detector_in),
        .out(M_p1split_button_edge_detector_out)
    );
    
    
    localparam _MP_CLK_FREQ_1332406653 = 24'h989680;
    localparam _MP_MIN_DELAY_1332406653 = 5'h14;
    localparam _MP_NUM_SYNC_1332406653 = 2'h2;
    logic M_p1l_button_cond_in;
    logic M_p1l_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1332406653),
        .MIN_DELAY(_MP_MIN_DELAY_1332406653),
        .NUM_SYNC(_MP_NUM_SYNC_1332406653)
    ) p1l_button_cond (
        .clk(clk),
        .in(M_p1l_button_cond_in),
        .out(M_p1l_button_cond_out)
    );
    
    
    localparam _MP_CLK_FREQ_461132104 = 24'h989680;
    localparam _MP_MIN_DELAY_461132104 = 5'h14;
    localparam _MP_NUM_SYNC_461132104 = 2'h2;
    logic M_p1r_button_cond_in;
    logic M_p1r_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_461132104),
        .MIN_DELAY(_MP_MIN_DELAY_461132104),
        .NUM_SYNC(_MP_NUM_SYNC_461132104)
    ) p1r_button_cond (
        .clk(clk),
        .in(M_p1r_button_cond_in),
        .out(M_p1r_button_cond_out)
    );
    
    
    localparam _MP_CLK_FREQ_845411344 = 24'h989680;
    localparam _MP_MIN_DELAY_845411344 = 5'h14;
    localparam _MP_NUM_SYNC_845411344 = 2'h2;
    logic M_p2l_button_cond_in;
    logic M_p2l_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_845411344),
        .MIN_DELAY(_MP_MIN_DELAY_845411344),
        .NUM_SYNC(_MP_NUM_SYNC_845411344)
    ) p2l_button_cond (
        .clk(clk),
        .in(M_p2l_button_cond_in),
        .out(M_p2l_button_cond_out)
    );
    
    
    localparam _MP_CLK_FREQ_1357705467 = 24'h989680;
    localparam _MP_MIN_DELAY_1357705467 = 5'h14;
    localparam _MP_NUM_SYNC_1357705467 = 2'h2;
    logic M_p2r_button_cond_in;
    logic M_p2r_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1357705467),
        .MIN_DELAY(_MP_MIN_DELAY_1357705467),
        .NUM_SYNC(_MP_NUM_SYNC_1357705467)
    ) p2r_button_cond (
        .clk(clk),
        .in(M_p2r_button_cond_in),
        .out(M_p2r_button_cond_out)
    );
    
    
    localparam _MP_CLK_FREQ_1666700932 = 24'h989680;
    localparam _MP_MIN_DELAY_1666700932 = 5'h14;
    localparam _MP_NUM_SYNC_1666700932 = 2'h2;
    logic M_p1split_button_cond_in;
    logic M_p1split_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1666700932),
        .MIN_DELAY(_MP_MIN_DELAY_1666700932),
        .NUM_SYNC(_MP_NUM_SYNC_1666700932)
    ) p1split_button_cond (
        .clk(clk),
        .in(M_p1split_button_cond_in),
        .out(M_p1split_button_cond_out)
    );
    
    
    localparam _MP_SLOW_CLOCK_DIV_441990583 = 5'h15;
    localparam _MP_CLOCK_DIVIDER_441990583 = 5'h1a;
    logic M_cd_p1l_button;
    logic M_cd_p1r_button;
    logic M_cd_p2r_button;
    logic M_cd_p2l_button;
    logic M_cd_p1split;
    logic M_cd_p2split;
    logic [31:0] M_cd_p1l_score_out;
    logic [31:0] M_cd_p1r_score_out;
    logic [31:0] M_cd_p2l_score_out;
    logic [31:0] M_cd_p2r_score_out;
    logic [31:0] M_cd_p1l_avail;
    logic [31:0] M_cd_p1r_avail;
    logic [31:0] M_cd_p2l_avail;
    logic [31:0] M_cd_p2r_avail;
    logic [31:0] M_cd_timer_led_out;
    logic [3:0] M_cd_debugging;
    logic M_cd_slow_clock_out;
    
    chopsticks_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_441990583),
        .CLOCK_DIVIDER(_MP_CLOCK_DIVIDER_441990583)
    ) cd (
        .clk(clk),
        .rst(rst),
        .p1l_button(M_cd_p1l_button),
        .p1r_button(M_cd_p1r_button),
        .p2r_button(M_cd_p2r_button),
        .p2l_button(M_cd_p2l_button),
        .p1split(M_cd_p1split),
        .p2split(M_cd_p2split),
        .p1l_score_out(M_cd_p1l_score_out),
        .p1r_score_out(M_cd_p1r_score_out),
        .p2l_score_out(M_cd_p2l_score_out),
        .p2r_score_out(M_cd_p2r_score_out),
        .p1l_avail(M_cd_p1l_avail),
        .p1r_avail(M_cd_p1r_avail),
        .p2l_avail(M_cd_p2l_avail),
        .p2r_avail(M_cd_p2r_avail),
        .timer_led_out(M_cd_timer_led_out),
        .debugging(M_cd_debugging),
        .slow_clock_out(M_cd_slow_clock_out)
    );
    
    
    localparam _MP_DIGITS_934713752 = 3'h4;
    localparam _MP_DIV_934713752 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_934713752),
        .DIV(_MP_DIV_934713752)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_DIGITS_88330588 = 3'h4;
    localparam _MP_LEADING_ZEROS_88330588 = 1'h0;
    logic [13:0] M_bin_to_dec_converter_value;
    logic [3:0][3:0] M_bin_to_dec_converter_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_88330588),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_88330588)
    ) bin_to_dec_converter (
        .value(M_bin_to_dec_converter_value),
        .digits(M_bin_to_dec_converter_digits)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_p1l_button_cond_in = io_button[1'h0];
        M_p1r_button_cond_in = io_button[1'h1];
        M_p2l_button_cond_in = io_button[2'h2];
        M_p2r_button_cond_in = io_button[2'h3];
        M_p1split_button_cond_in = io_button[3'h4];
        M_p1l_button_edge_detector_in = M_p1l_button_cond_out;
        M_p1r_button_edge_detector_in = M_p1r_button_cond_out;
        M_p2l_button_edge_detector_in = M_p2l_button_cond_out;
        M_p2r_button_edge_detector_in = M_p2r_button_cond_out;
        M_p1split_button_edge_detector_in = M_p1split_button_cond_out;
        M_cd_p1l_button = M_p1l_button_edge_detector_out;
        M_cd_p1r_button = M_p1r_button_edge_detector_out;
        M_cd_p2l_button = M_p2l_button_edge_detector_out;
        M_cd_p2r_button = M_p2r_button_edge_detector_out;
        M_cd_p1split = M_p1split_button_edge_detector_out;
        M_cd_p2split = io_dip[1'h0][1'h0];
        io_led[2'h2][3'h7:3'h4] = M_cd_p1l_score_out[2'h3:1'h0];
        io_led[2'h2][2'h3:1'h0] = M_cd_p1r_score_out[2'h3:1'h0];
        io_led[1'h1][3'h7:3'h4] = M_cd_p2l_score_out[2'h3:1'h0];
        io_led[1'h1][2'h3:1'h0] = M_cd_p2r_score_out[2'h3:1'h0];
        io_led[1'h0][3'h7] = M_cd_p1l_avail[1'h0];
        io_led[1'h0][3'h6] = M_cd_p1r_avail[1'h0];
        io_led[1'h0][3'h5] = M_cd_p2l_avail[1'h0];
        io_led[1'h0][3'h4] = M_cd_p2r_avail[1'h0];
        io_led[1'h0][2'h3:1'h0] = M_cd_timer_led_out[2'h3:1'h0];
        led[3'h7:3'h4] = M_cd_debugging;
        led[1'h0] = M_cd_slow_clock_out;
        M_seg_values = {{4'h0, 4'h0, 4'h0, 4'h0}};
        M_bin_to_dec_converter_value = M_cd_timer_led_out[2'h3:1'h0];
        M_seg_values = M_bin_to_dec_converter_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
    end
    
    
endmodule